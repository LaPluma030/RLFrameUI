// source: engine.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

import * as jspb from "google-protobuf";
var goog = jspb;
var proto = {};

import google_protobuf_timestamp_pb from "./timestamp_pb";
goog.object.extend(proto, google_protobuf_timestamp_pb);
import google_protobuf_duration_pb from "./duration_pb";
goog.object.extend(proto, google_protobuf_duration_pb);
goog.exportSymbol("cqsim.control.CommonRequest", null, proto);
goog.exportSymbol("cqsim.control.CommonResponse", null, proto);
goog.exportSymbol("cqsim.control.ControlCmd", null, proto);
goog.exportSymbol("cqsim.control.ControlCmd.CmdCase", null, proto);
goog.exportSymbol("cqsim.control.ControlCmd.Mode", null, proto);
goog.exportSymbol("cqsim.control.ControlCmd.RunCmdType", null, proto);
goog.exportSymbol("cqsim.control.DataSysInfoResponse", null, proto);
goog.exportSymbol("cqsim.control.DataSysInfoResponse.ServiceState", null, proto);
goog.exportSymbol("cqsim.control.EngineNodeState", null, proto);
goog.exportSymbol("cqsim.control.EngineNodeState.State", null, proto);
goog.exportSymbol("cqsim.control.Entity", null, proto);
goog.exportSymbol("cqsim.control.EntityListRequest", null, proto);
goog.exportSymbol("cqsim.control.EntityListResponse", null, proto);
goog.exportSymbol("cqsim.control.EntityListResponse.EntityInfo", null, proto);
goog.exportSymbol("cqsim.control.ErrMsgResponse", null, proto);
goog.exportSymbol("cqsim.control.HttpInfo", null, proto);
goog.exportSymbol("cqsim.control.InitInfo", null, proto);
goog.exportSymbol("cqsim.control.InitInfo.InitInfoCase", null, proto);
goog.exportSymbol("cqsim.control.InitInfo.MultiSample", null, proto);
goog.exportSymbol("cqsim.control.InitInfo.OneSample", null, proto);
goog.exportSymbol("cqsim.control.InitedResponse", null, proto);
goog.exportSymbol("cqsim.control.LogLevel", null, proto);
goog.exportSymbol("cqsim.control.LogLevelRequest", null, proto);
goog.exportSymbol("cqsim.control.NodeDesign", null, proto);
goog.exportSymbol("cqsim.control.NodeJoinExitResponse", null, proto);
goog.exportSymbol("cqsim.control.NodeResponse", null, proto);
goog.exportSymbol("cqsim.control.SysInfoResponse", null, proto);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cqsim.control.CommonResponse = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.cqsim.control.CommonResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cqsim.control.CommonResponse.displayName = "proto.cqsim.control.CommonResponse";
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cqsim.control.LogLevelRequest = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.cqsim.control.LogLevelRequest.repeatedFields_, null);
};
goog.inherits(proto.cqsim.control.LogLevelRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cqsim.control.LogLevelRequest.displayName = "proto.cqsim.control.LogLevelRequest";
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cqsim.control.ErrMsgResponse = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.cqsim.control.ErrMsgResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cqsim.control.ErrMsgResponse.displayName = "proto.cqsim.control.ErrMsgResponse";
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cqsim.control.CommonRequest = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.cqsim.control.CommonRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cqsim.control.CommonRequest.displayName = "proto.cqsim.control.CommonRequest";
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cqsim.control.NodeJoinExitResponse = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.cqsim.control.NodeJoinExitResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cqsim.control.NodeJoinExitResponse.displayName = "proto.cqsim.control.NodeJoinExitResponse";
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cqsim.control.EntityListRequest = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.cqsim.control.EntityListRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cqsim.control.EntityListRequest.displayName = "proto.cqsim.control.EntityListRequest";
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cqsim.control.Entity = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.cqsim.control.Entity, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cqsim.control.Entity.displayName = "proto.cqsim.control.Entity";
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cqsim.control.EntityListResponse = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.cqsim.control.EntityListResponse.repeatedFields_, null);
};
goog.inherits(proto.cqsim.control.EntityListResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cqsim.control.EntityListResponse.displayName = "proto.cqsim.control.EntityListResponse";
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cqsim.control.EntityListResponse.EntityInfo = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.cqsim.control.EntityListResponse.EntityInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cqsim.control.EntityListResponse.EntityInfo.displayName = "proto.cqsim.control.EntityListResponse.EntityInfo";
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cqsim.control.NodeDesign = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.cqsim.control.NodeDesign.repeatedFields_, null);
};
goog.inherits(proto.cqsim.control.NodeDesign, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cqsim.control.NodeDesign.displayName = "proto.cqsim.control.NodeDesign";
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cqsim.control.InitInfo = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.cqsim.control.InitInfo.oneofGroups_);
};
goog.inherits(proto.cqsim.control.InitInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cqsim.control.InitInfo.displayName = "proto.cqsim.control.InitInfo";
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cqsim.control.InitInfo.OneSample = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.cqsim.control.InitInfo.OneSample.repeatedFields_, null);
};
goog.inherits(proto.cqsim.control.InitInfo.OneSample, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cqsim.control.InitInfo.OneSample.displayName = "proto.cqsim.control.InitInfo.OneSample";
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cqsim.control.InitInfo.MultiSample = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.cqsim.control.InitInfo.MultiSample.repeatedFields_, null);
};
goog.inherits(proto.cqsim.control.InitInfo.MultiSample, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cqsim.control.InitInfo.MultiSample.displayName = "proto.cqsim.control.InitInfo.MultiSample";
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cqsim.control.HttpInfo = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.cqsim.control.HttpInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cqsim.control.HttpInfo.displayName = "proto.cqsim.control.HttpInfo";
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cqsim.control.ControlCmd = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.cqsim.control.ControlCmd.oneofGroups_);
};
goog.inherits(proto.cqsim.control.ControlCmd, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cqsim.control.ControlCmd.displayName = "proto.cqsim.control.ControlCmd";
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cqsim.control.EngineNodeState = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.cqsim.control.EngineNodeState, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cqsim.control.EngineNodeState.displayName = "proto.cqsim.control.EngineNodeState";
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cqsim.control.SysInfoResponse = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.cqsim.control.SysInfoResponse.repeatedFields_, null);
};
goog.inherits(proto.cqsim.control.SysInfoResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cqsim.control.SysInfoResponse.displayName = "proto.cqsim.control.SysInfoResponse";
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cqsim.control.DataSysInfoResponse = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.cqsim.control.DataSysInfoResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cqsim.control.DataSysInfoResponse.displayName = "proto.cqsim.control.DataSysInfoResponse";
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cqsim.control.NodeResponse = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.cqsim.control.NodeResponse.repeatedFields_, null);
};
goog.inherits(proto.cqsim.control.NodeResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cqsim.control.NodeResponse.displayName = "proto.cqsim.control.NodeResponse";
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cqsim.control.InitedResponse = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.cqsim.control.InitedResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cqsim.control.InitedResponse.displayName = "proto.cqsim.control.InitedResponse";
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.cqsim.control.CommonResponse.prototype.toObject = function (opt_includeInstance) {
    return proto.cqsim.control.CommonResponse.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.cqsim.control.CommonResponse} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.cqsim.control.CommonResponse.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        msg: jspb.Message.getFieldWithDefault(msg, 1, ""),
        code: jspb.Message.getFieldWithDefault(msg, 2, 0),
        errorLocation: jspb.Message.getFieldWithDefault(msg, 3, 0),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cqsim.control.CommonResponse}
 */
proto.cqsim.control.CommonResponse.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cqsim.control.CommonResponse();
  return proto.cqsim.control.CommonResponse.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cqsim.control.CommonResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cqsim.control.CommonResponse}
 */
proto.cqsim.control.CommonResponse.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString());
        msg.setMsg(value);
        break;
      case 2:
        var value = /** @type {number} */ (reader.readUint64());
        msg.setCode(value);
        break;
      case 3:
        var value = /** @type {number} */ (reader.readUint64());
        msg.setErrorLocation(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cqsim.control.CommonResponse.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.cqsim.control.CommonResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cqsim.control.CommonResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cqsim.control.CommonResponse.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getMsg();
  if (f.length > 0) {
    writer.writeString(1, f);
  }
  f = message.getCode();
  if (f !== 0) {
    writer.writeUint64(2, f);
  }
  f = message.getErrorLocation();
  if (f !== 0) {
    writer.writeUint64(3, f);
  }
};

/**
 * optional string msg = 1;
 * @return {string}
 */
proto.cqsim.control.CommonResponse.prototype.getMsg = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};

/**
 * @param {string} value
 * @return {!proto.cqsim.control.CommonResponse} returns this
 */
proto.cqsim.control.CommonResponse.prototype.setMsg = function (value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};

/**
 * optional uint64 code = 2;
 * @return {number}
 */
proto.cqsim.control.CommonResponse.prototype.getCode = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};

/**
 * @param {number} value
 * @return {!proto.cqsim.control.CommonResponse} returns this
 */
proto.cqsim.control.CommonResponse.prototype.setCode = function (value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};

/**
 * optional uint64 error_location = 3;
 * @return {number}
 */
proto.cqsim.control.CommonResponse.prototype.getErrorLocation = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};

/**
 * @param {number} value
 * @return {!proto.cqsim.control.CommonResponse} returns this
 */
proto.cqsim.control.CommonResponse.prototype.setErrorLocation = function (value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.cqsim.control.LogLevelRequest.repeatedFields_ = [1];

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.cqsim.control.LogLevelRequest.prototype.toObject = function (opt_includeInstance) {
    return proto.cqsim.control.LogLevelRequest.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.cqsim.control.LogLevelRequest} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.cqsim.control.LogLevelRequest.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        levelsList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f,
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cqsim.control.LogLevelRequest}
 */
proto.cqsim.control.LogLevelRequest.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cqsim.control.LogLevelRequest();
  return proto.cqsim.control.LogLevelRequest.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cqsim.control.LogLevelRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cqsim.control.LogLevelRequest}
 */
proto.cqsim.control.LogLevelRequest.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var values = /** @type {!Array<!proto.cqsim.control.LogLevel>} */ (
          reader.isDelimited() ? reader.readPackedEnum() : [reader.readEnum()]
        );
        for (var i = 0; i < values.length; i++) {
          msg.addLevels(values[i]);
        }
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cqsim.control.LogLevelRequest.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.cqsim.control.LogLevelRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cqsim.control.LogLevelRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cqsim.control.LogLevelRequest.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getLevelsList();
  if (f.length > 0) {
    writer.writePackedEnum(1, f);
  }
};

/**
 * repeated LogLevel levels = 1;
 * @return {!Array<!proto.cqsim.control.LogLevel>}
 */
proto.cqsim.control.LogLevelRequest.prototype.getLevelsList = function () {
  return /** @type {!Array<!proto.cqsim.control.LogLevel>} */ (jspb.Message.getRepeatedField(this, 1));
};

/**
 * @param {!Array<!proto.cqsim.control.LogLevel>} value
 * @return {!proto.cqsim.control.LogLevelRequest} returns this
 */
proto.cqsim.control.LogLevelRequest.prototype.setLevelsList = function (value) {
  return jspb.Message.setField(this, 1, value || []);
};

/**
 * @param {!proto.cqsim.control.LogLevel} value
 * @param {number=} opt_index
 * @return {!proto.cqsim.control.LogLevelRequest} returns this
 */
proto.cqsim.control.LogLevelRequest.prototype.addLevels = function (value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};

/**
 * Clears the list making it empty but non-null.
 * @return {!proto.cqsim.control.LogLevelRequest} returns this
 */
proto.cqsim.control.LogLevelRequest.prototype.clearLevelsList = function () {
  return this.setLevelsList([]);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.cqsim.control.ErrMsgResponse.prototype.toObject = function (opt_includeInstance) {
    return proto.cqsim.control.ErrMsgResponse.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.cqsim.control.ErrMsgResponse} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.cqsim.control.ErrMsgResponse.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        msg: jspb.Message.getFieldWithDefault(msg, 1, ""),
        level: jspb.Message.getFieldWithDefault(msg, 2, 0),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cqsim.control.ErrMsgResponse}
 */
proto.cqsim.control.ErrMsgResponse.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cqsim.control.ErrMsgResponse();
  return proto.cqsim.control.ErrMsgResponse.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cqsim.control.ErrMsgResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cqsim.control.ErrMsgResponse}
 */
proto.cqsim.control.ErrMsgResponse.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString());
        msg.setMsg(value);
        break;
      case 2:
        var value = /** @type {!proto.cqsim.control.LogLevel} */ (reader.readEnum());
        msg.setLevel(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cqsim.control.ErrMsgResponse.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.cqsim.control.ErrMsgResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cqsim.control.ErrMsgResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cqsim.control.ErrMsgResponse.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getMsg();
  if (f.length > 0) {
    writer.writeString(1, f);
  }
  f = message.getLevel();
  if (f !== 0.0) {
    writer.writeEnum(2, f);
  }
};

/**
 * optional string msg = 1;
 * @return {string}
 */
proto.cqsim.control.ErrMsgResponse.prototype.getMsg = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};

/**
 * @param {string} value
 * @return {!proto.cqsim.control.ErrMsgResponse} returns this
 */
proto.cqsim.control.ErrMsgResponse.prototype.setMsg = function (value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};

/**
 * optional LogLevel level = 2;
 * @return {!proto.cqsim.control.LogLevel}
 */
proto.cqsim.control.ErrMsgResponse.prototype.getLevel = function () {
  return /** @type {!proto.cqsim.control.LogLevel} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};

/**
 * @param {!proto.cqsim.control.LogLevel} value
 * @return {!proto.cqsim.control.ErrMsgResponse} returns this
 */
proto.cqsim.control.ErrMsgResponse.prototype.setLevel = function (value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.cqsim.control.CommonRequest.prototype.toObject = function (opt_includeInstance) {
    return proto.cqsim.control.CommonRequest.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.cqsim.control.CommonRequest} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.cqsim.control.CommonRequest.toObject = function (includeInstance, msg) {
    var f,
      obj = {};

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cqsim.control.CommonRequest}
 */
proto.cqsim.control.CommonRequest.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cqsim.control.CommonRequest();
  return proto.cqsim.control.CommonRequest.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cqsim.control.CommonRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cqsim.control.CommonRequest}
 */
proto.cqsim.control.CommonRequest.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cqsim.control.CommonRequest.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.cqsim.control.CommonRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cqsim.control.CommonRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cqsim.control.CommonRequest.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.cqsim.control.NodeJoinExitResponse.prototype.toObject = function (opt_includeInstance) {
    return proto.cqsim.control.NodeJoinExitResponse.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.cqsim.control.NodeJoinExitResponse} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.cqsim.control.NodeJoinExitResponse.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        address: jspb.Message.getFieldWithDefault(msg, 1, ""),
        isMasterNode: jspb.Message.getBooleanFieldWithDefault(msg, 2, false),
        isJoin: jspb.Message.getBooleanFieldWithDefault(msg, 3, false),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cqsim.control.NodeJoinExitResponse}
 */
proto.cqsim.control.NodeJoinExitResponse.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cqsim.control.NodeJoinExitResponse();
  return proto.cqsim.control.NodeJoinExitResponse.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cqsim.control.NodeJoinExitResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cqsim.control.NodeJoinExitResponse}
 */
proto.cqsim.control.NodeJoinExitResponse.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString());
        msg.setAddress(value);
        break;
      case 2:
        var value = /** @type {boolean} */ (reader.readBool());
        msg.setIsMasterNode(value);
        break;
      case 3:
        var value = /** @type {boolean} */ (reader.readBool());
        msg.setIsJoin(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cqsim.control.NodeJoinExitResponse.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.cqsim.control.NodeJoinExitResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cqsim.control.NodeJoinExitResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cqsim.control.NodeJoinExitResponse.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getAddress();
  if (f.length > 0) {
    writer.writeString(1, f);
  }
  f = message.getIsMasterNode();
  if (f) {
    writer.writeBool(2, f);
  }
  f = message.getIsJoin();
  if (f) {
    writer.writeBool(3, f);
  }
};

/**
 * optional string address = 1;
 * @return {string}
 */
proto.cqsim.control.NodeJoinExitResponse.prototype.getAddress = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};

/**
 * @param {string} value
 * @return {!proto.cqsim.control.NodeJoinExitResponse} returns this
 */
proto.cqsim.control.NodeJoinExitResponse.prototype.setAddress = function (value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};

/**
 * optional bool is_master_node = 2;
 * @return {boolean}
 */
proto.cqsim.control.NodeJoinExitResponse.prototype.getIsMasterNode = function () {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};

/**
 * @param {boolean} value
 * @return {!proto.cqsim.control.NodeJoinExitResponse} returns this
 */
proto.cqsim.control.NodeJoinExitResponse.prototype.setIsMasterNode = function (value) {
  return jspb.Message.setProto3BooleanField(this, 2, value);
};

/**
 * optional bool is_join = 3;
 * @return {boolean}
 */
proto.cqsim.control.NodeJoinExitResponse.prototype.getIsJoin = function () {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};

/**
 * @param {boolean} value
 * @return {!proto.cqsim.control.NodeJoinExitResponse} returns this
 */
proto.cqsim.control.NodeJoinExitResponse.prototype.setIsJoin = function (value) {
  return jspb.Message.setProto3BooleanField(this, 3, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.cqsim.control.EntityListRequest.prototype.toObject = function (opt_includeInstance) {
    return proto.cqsim.control.EntityListRequest.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.cqsim.control.EntityListRequest} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.cqsim.control.EntityListRequest.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        taskId: jspb.Message.getFieldWithDefault(msg, 1, 0),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cqsim.control.EntityListRequest}
 */
proto.cqsim.control.EntityListRequest.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cqsim.control.EntityListRequest();
  return proto.cqsim.control.EntityListRequest.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cqsim.control.EntityListRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cqsim.control.EntityListRequest}
 */
proto.cqsim.control.EntityListRequest.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {number} */ (reader.readUint64());
        msg.setTaskId(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cqsim.control.EntityListRequest.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.cqsim.control.EntityListRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cqsim.control.EntityListRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cqsim.control.EntityListRequest.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getTaskId();
  if (f !== 0) {
    writer.writeUint64(1, f);
  }
};

/**
 * optional uint64 task_id = 1;
 * @return {number}
 */
proto.cqsim.control.EntityListRequest.prototype.getTaskId = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};

/**
 * @param {number} value
 * @return {!proto.cqsim.control.EntityListRequest} returns this
 */
proto.cqsim.control.EntityListRequest.prototype.setTaskId = function (value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.cqsim.control.Entity.prototype.toObject = function (opt_includeInstance) {
    return proto.cqsim.control.Entity.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.cqsim.control.Entity} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.cqsim.control.Entity.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        id: jspb.Message.getFieldWithDefault(msg, 1, ""),
        modelId: jspb.Message.getFieldWithDefault(msg, 2, ""),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cqsim.control.Entity}
 */
proto.cqsim.control.Entity.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cqsim.control.Entity();
  return proto.cqsim.control.Entity.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cqsim.control.Entity} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cqsim.control.Entity}
 */
proto.cqsim.control.Entity.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString());
        msg.setId(value);
        break;
      case 2:
        var value = /** @type {string} */ (reader.readString());
        msg.setModelId(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cqsim.control.Entity.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.cqsim.control.Entity.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cqsim.control.Entity} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cqsim.control.Entity.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(1, f);
  }
  f = message.getModelId();
  if (f.length > 0) {
    writer.writeString(2, f);
  }
};

/**
 * optional string id = 1;
 * @return {string}
 */
proto.cqsim.control.Entity.prototype.getId = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};

/**
 * @param {string} value
 * @return {!proto.cqsim.control.Entity} returns this
 */
proto.cqsim.control.Entity.prototype.setId = function (value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};

/**
 * optional string model_id = 2;
 * @return {string}
 */
proto.cqsim.control.Entity.prototype.getModelId = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};

/**
 * @param {string} value
 * @return {!proto.cqsim.control.Entity} returns this
 */
proto.cqsim.control.Entity.prototype.setModelId = function (value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.cqsim.control.EntityListResponse.repeatedFields_ = [1];

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.cqsim.control.EntityListResponse.prototype.toObject = function (opt_includeInstance) {
    return proto.cqsim.control.EntityListResponse.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.cqsim.control.EntityListResponse} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.cqsim.control.EntityListResponse.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        entityListList: jspb.Message.toObjectList(
          msg.getEntityListList(),
          proto.cqsim.control.EntityListResponse.EntityInfo.toObject,
          includeInstance
        ),
        entityListJson: jspb.Message.getFieldWithDefault(msg, 2, ""),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cqsim.control.EntityListResponse}
 */
proto.cqsim.control.EntityListResponse.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cqsim.control.EntityListResponse();
  return proto.cqsim.control.EntityListResponse.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cqsim.control.EntityListResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cqsim.control.EntityListResponse}
 */
proto.cqsim.control.EntityListResponse.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = new proto.cqsim.control.EntityListResponse.EntityInfo();
        reader.readMessage(value, proto.cqsim.control.EntityListResponse.EntityInfo.deserializeBinaryFromReader);
        msg.addEntityList(value);
        break;
      case 2:
        var value = /** @type {string} */ (reader.readString());
        msg.setEntityListJson(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cqsim.control.EntityListResponse.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.cqsim.control.EntityListResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cqsim.control.EntityListResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cqsim.control.EntityListResponse.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getEntityListList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(1, f, proto.cqsim.control.EntityListResponse.EntityInfo.serializeBinaryToWriter);
  }
  f = message.getEntityListJson();
  if (f.length > 0) {
    writer.writeString(2, f);
  }
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.cqsim.control.EntityListResponse.EntityInfo.prototype.toObject = function (opt_includeInstance) {
    return proto.cqsim.control.EntityListResponse.EntityInfo.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.cqsim.control.EntityListResponse.EntityInfo} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.cqsim.control.EntityListResponse.EntityInfo.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        id: jspb.Message.getFieldWithDefault(msg, 1, ""),
        name: jspb.Message.getFieldWithDefault(msg, 2, ""),
        modelName: jspb.Message.getFieldWithDefault(msg, 3, ""),
        modelId: jspb.Message.getFieldWithDefault(msg, 4, ""),
        campName: jspb.Message.getFieldWithDefault(msg, 5, ""),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cqsim.control.EntityListResponse.EntityInfo}
 */
proto.cqsim.control.EntityListResponse.EntityInfo.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cqsim.control.EntityListResponse.EntityInfo();
  return proto.cqsim.control.EntityListResponse.EntityInfo.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cqsim.control.EntityListResponse.EntityInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cqsim.control.EntityListResponse.EntityInfo}
 */
proto.cqsim.control.EntityListResponse.EntityInfo.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString());
        msg.setId(value);
        break;
      case 2:
        var value = /** @type {string} */ (reader.readString());
        msg.setName(value);
        break;
      case 3:
        var value = /** @type {string} */ (reader.readString());
        msg.setModelName(value);
        break;
      case 4:
        var value = /** @type {string} */ (reader.readString());
        msg.setModelId(value);
        break;
      case 5:
        var value = /** @type {string} */ (reader.readString());
        msg.setCampName(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cqsim.control.EntityListResponse.EntityInfo.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.cqsim.control.EntityListResponse.EntityInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cqsim.control.EntityListResponse.EntityInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cqsim.control.EntityListResponse.EntityInfo.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(1, f);
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(2, f);
  }
  f = message.getModelName();
  if (f.length > 0) {
    writer.writeString(3, f);
  }
  f = message.getModelId();
  if (f.length > 0) {
    writer.writeString(4, f);
  }
  f = message.getCampName();
  if (f.length > 0) {
    writer.writeString(5, f);
  }
};

/**
 * optional string id = 1;
 * @return {string}
 */
proto.cqsim.control.EntityListResponse.EntityInfo.prototype.getId = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};

/**
 * @param {string} value
 * @return {!proto.cqsim.control.EntityListResponse.EntityInfo} returns this
 */
proto.cqsim.control.EntityListResponse.EntityInfo.prototype.setId = function (value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};

/**
 * optional string name = 2;
 * @return {string}
 */
proto.cqsim.control.EntityListResponse.EntityInfo.prototype.getName = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};

/**
 * @param {string} value
 * @return {!proto.cqsim.control.EntityListResponse.EntityInfo} returns this
 */
proto.cqsim.control.EntityListResponse.EntityInfo.prototype.setName = function (value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};

/**
 * optional string model_name = 3;
 * @return {string}
 */
proto.cqsim.control.EntityListResponse.EntityInfo.prototype.getModelName = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};

/**
 * @param {string} value
 * @return {!proto.cqsim.control.EntityListResponse.EntityInfo} returns this
 */
proto.cqsim.control.EntityListResponse.EntityInfo.prototype.setModelName = function (value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};

/**
 * optional string model_id = 4;
 * @return {string}
 */
proto.cqsim.control.EntityListResponse.EntityInfo.prototype.getModelId = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};

/**
 * @param {string} value
 * @return {!proto.cqsim.control.EntityListResponse.EntityInfo} returns this
 */
proto.cqsim.control.EntityListResponse.EntityInfo.prototype.setModelId = function (value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};

/**
 * optional string camp_name = 5;
 * @return {string}
 */
proto.cqsim.control.EntityListResponse.EntityInfo.prototype.getCampName = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};

/**
 * @param {string} value
 * @return {!proto.cqsim.control.EntityListResponse.EntityInfo} returns this
 */
proto.cqsim.control.EntityListResponse.EntityInfo.prototype.setCampName = function (value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};

/**
 * repeated EntityInfo entity_list = 1;
 * @return {!Array<!proto.cqsim.control.EntityListResponse.EntityInfo>}
 */
proto.cqsim.control.EntityListResponse.prototype.getEntityListList = function () {
  return /** @type{!Array<!proto.cqsim.control.EntityListResponse.EntityInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.cqsim.control.EntityListResponse.EntityInfo, 1)
  );
};

/**
 * @param {!Array<!proto.cqsim.control.EntityListResponse.EntityInfo>} value
 * @return {!proto.cqsim.control.EntityListResponse} returns this
 */
proto.cqsim.control.EntityListResponse.prototype.setEntityListList = function (value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};

/**
 * @param {!proto.cqsim.control.EntityListResponse.EntityInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.cqsim.control.EntityListResponse.EntityInfo}
 */
proto.cqsim.control.EntityListResponse.prototype.addEntityList = function (opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(
    this,
    1,
    opt_value,
    proto.cqsim.control.EntityListResponse.EntityInfo,
    opt_index
  );
};

/**
 * Clears the list making it empty but non-null.
 * @return {!proto.cqsim.control.EntityListResponse} returns this
 */
proto.cqsim.control.EntityListResponse.prototype.clearEntityListList = function () {
  return this.setEntityListList([]);
};

/**
 * optional string entity_list_json = 2;
 * @return {string}
 */
proto.cqsim.control.EntityListResponse.prototype.getEntityListJson = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};

/**
 * @param {string} value
 * @return {!proto.cqsim.control.EntityListResponse} returns this
 */
proto.cqsim.control.EntityListResponse.prototype.setEntityListJson = function (value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.cqsim.control.NodeDesign.repeatedFields_ = [2];

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.cqsim.control.NodeDesign.prototype.toObject = function (opt_includeInstance) {
    return proto.cqsim.control.NodeDesign.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.cqsim.control.NodeDesign} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.cqsim.control.NodeDesign.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        address: jspb.Message.getFieldWithDefault(msg, 1, ""),
        entitiesList: jspb.Message.toObjectList(msg.getEntitiesList(), proto.cqsim.control.Entity.toObject, includeInstance),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cqsim.control.NodeDesign}
 */
proto.cqsim.control.NodeDesign.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cqsim.control.NodeDesign();
  return proto.cqsim.control.NodeDesign.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cqsim.control.NodeDesign} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cqsim.control.NodeDesign}
 */
proto.cqsim.control.NodeDesign.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString());
        msg.setAddress(value);
        break;
      case 2:
        var value = new proto.cqsim.control.Entity();
        reader.readMessage(value, proto.cqsim.control.Entity.deserializeBinaryFromReader);
        msg.addEntities(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cqsim.control.NodeDesign.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.cqsim.control.NodeDesign.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cqsim.control.NodeDesign} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cqsim.control.NodeDesign.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getAddress();
  if (f.length > 0) {
    writer.writeString(1, f);
  }
  f = message.getEntitiesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(2, f, proto.cqsim.control.Entity.serializeBinaryToWriter);
  }
};

/**
 * optional string address = 1;
 * @return {string}
 */
proto.cqsim.control.NodeDesign.prototype.getAddress = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};

/**
 * @param {string} value
 * @return {!proto.cqsim.control.NodeDesign} returns this
 */
proto.cqsim.control.NodeDesign.prototype.setAddress = function (value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};

/**
 * repeated Entity entities = 2;
 * @return {!Array<!proto.cqsim.control.Entity>}
 */
proto.cqsim.control.NodeDesign.prototype.getEntitiesList = function () {
  return /** @type{!Array<!proto.cqsim.control.Entity>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.cqsim.control.Entity, 2)
  );
};

/**
 * @param {!Array<!proto.cqsim.control.Entity>} value
 * @return {!proto.cqsim.control.NodeDesign} returns this
 */
proto.cqsim.control.NodeDesign.prototype.setEntitiesList = function (value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};

/**
 * @param {!proto.cqsim.control.Entity=} opt_value
 * @param {number=} opt_index
 * @return {!proto.cqsim.control.Entity}
 */
proto.cqsim.control.NodeDesign.prototype.addEntities = function (opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.cqsim.control.Entity, opt_index);
};

/**
 * Clears the list making it empty but non-null.
 * @return {!proto.cqsim.control.NodeDesign} returns this
 */
proto.cqsim.control.NodeDesign.prototype.clearEntitiesList = function () {
  return this.setEntitiesList([]);
};

/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.cqsim.control.InitInfo.oneofGroups_ = [[1, 2, 3]];

/**
 * @enum {number}
 */
proto.cqsim.control.InitInfo.InitInfoCase = {
  INIT_INFO_NOT_SET: 0,
  ONE_SAMPLE_CONFIG: 1,
  MULTI_SAMPLE_CONFIG: 2,
  DATA_ID: 3,
};

/**
 * @return {proto.cqsim.control.InitInfo.InitInfoCase}
 */
proto.cqsim.control.InitInfo.prototype.getInitInfoCase = function () {
  return /** @type {proto.cqsim.control.InitInfo.InitInfoCase} */ (
    jspb.Message.computeOneofCase(this, proto.cqsim.control.InitInfo.oneofGroups_[0])
  );
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.cqsim.control.InitInfo.prototype.toObject = function (opt_includeInstance) {
    return proto.cqsim.control.InitInfo.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.cqsim.control.InitInfo} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.cqsim.control.InitInfo.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        oneSampleConfig: (f = msg.getOneSampleConfig()) && proto.cqsim.control.InitInfo.OneSample.toObject(includeInstance, f),
        multiSampleConfig:
          (f = msg.getMultiSampleConfig()) && proto.cqsim.control.InitInfo.MultiSample.toObject(includeInstance, f),
        dataId: jspb.Message.getFieldWithDefault(msg, 3, 0),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cqsim.control.InitInfo}
 */
proto.cqsim.control.InitInfo.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cqsim.control.InitInfo();
  return proto.cqsim.control.InitInfo.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cqsim.control.InitInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cqsim.control.InitInfo}
 */
proto.cqsim.control.InitInfo.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = new proto.cqsim.control.InitInfo.OneSample();
        reader.readMessage(value, proto.cqsim.control.InitInfo.OneSample.deserializeBinaryFromReader);
        msg.setOneSampleConfig(value);
        break;
      case 2:
        var value = new proto.cqsim.control.InitInfo.MultiSample();
        reader.readMessage(value, proto.cqsim.control.InitInfo.MultiSample.deserializeBinaryFromReader);
        msg.setMultiSampleConfig(value);
        break;
      case 3:
        var value = /** @type {number} */ (reader.readUint64());
        msg.setDataId(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cqsim.control.InitInfo.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.cqsim.control.InitInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cqsim.control.InitInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cqsim.control.InitInfo.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getOneSampleConfig();
  if (f != null) {
    writer.writeMessage(1, f, proto.cqsim.control.InitInfo.OneSample.serializeBinaryToWriter);
  }
  f = message.getMultiSampleConfig();
  if (f != null) {
    writer.writeMessage(2, f, proto.cqsim.control.InitInfo.MultiSample.serializeBinaryToWriter);
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeUint64(3, f);
  }
};

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.cqsim.control.InitInfo.OneSample.repeatedFields_ = [2];

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.cqsim.control.InitInfo.OneSample.prototype.toObject = function (opt_includeInstance) {
    return proto.cqsim.control.InitInfo.OneSample.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.cqsim.control.InitInfo.OneSample} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.cqsim.control.InitInfo.OneSample.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        taskId: jspb.Message.getFieldWithDefault(msg, 1, 0),
        nodesList: jspb.Message.toObjectList(msg.getNodesList(), proto.cqsim.control.NodeDesign.toObject, includeInstance),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cqsim.control.InitInfo.OneSample}
 */
proto.cqsim.control.InitInfo.OneSample.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cqsim.control.InitInfo.OneSample();
  return proto.cqsim.control.InitInfo.OneSample.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cqsim.control.InitInfo.OneSample} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cqsim.control.InitInfo.OneSample}
 */
proto.cqsim.control.InitInfo.OneSample.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {number} */ (reader.readUint64());
        msg.setTaskId(value);
        break;
      case 2:
        var value = new proto.cqsim.control.NodeDesign();
        reader.readMessage(value, proto.cqsim.control.NodeDesign.deserializeBinaryFromReader);
        msg.addNodes(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cqsim.control.InitInfo.OneSample.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.cqsim.control.InitInfo.OneSample.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cqsim.control.InitInfo.OneSample} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cqsim.control.InitInfo.OneSample.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getTaskId();
  if (f !== 0) {
    writer.writeUint64(1, f);
  }
  f = message.getNodesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(2, f, proto.cqsim.control.NodeDesign.serializeBinaryToWriter);
  }
};

/**
 * optional uint64 task_id = 1;
 * @return {number}
 */
proto.cqsim.control.InitInfo.OneSample.prototype.getTaskId = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};

/**
 * @param {number} value
 * @return {!proto.cqsim.control.InitInfo.OneSample} returns this
 */
proto.cqsim.control.InitInfo.OneSample.prototype.setTaskId = function (value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};

/**
 * repeated NodeDesign nodes = 2;
 * @return {!Array<!proto.cqsim.control.NodeDesign>}
 */
proto.cqsim.control.InitInfo.OneSample.prototype.getNodesList = function () {
  return /** @type{!Array<!proto.cqsim.control.NodeDesign>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.cqsim.control.NodeDesign, 2)
  );
};

/**
 * @param {!Array<!proto.cqsim.control.NodeDesign>} value
 * @return {!proto.cqsim.control.InitInfo.OneSample} returns this
 */
proto.cqsim.control.InitInfo.OneSample.prototype.setNodesList = function (value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};

/**
 * @param {!proto.cqsim.control.NodeDesign=} opt_value
 * @param {number=} opt_index
 * @return {!proto.cqsim.control.NodeDesign}
 */
proto.cqsim.control.InitInfo.OneSample.prototype.addNodes = function (opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.cqsim.control.NodeDesign, opt_index);
};

/**
 * Clears the list making it empty but non-null.
 * @return {!proto.cqsim.control.InitInfo.OneSample} returns this
 */
proto.cqsim.control.InitInfo.OneSample.prototype.clearNodesList = function () {
  return this.setNodesList([]);
};

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.cqsim.control.InitInfo.MultiSample.repeatedFields_ = [2];

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.cqsim.control.InitInfo.MultiSample.prototype.toObject = function (opt_includeInstance) {
    return proto.cqsim.control.InitInfo.MultiSample.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.cqsim.control.InitInfo.MultiSample} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.cqsim.control.InitInfo.MultiSample.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        expDesignId: jspb.Message.getFieldWithDefault(msg, 1, 0),
        nodesList: jspb.Message.toObjectList(msg.getNodesList(), proto.cqsim.control.NodeDesign.toObject, includeInstance),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cqsim.control.InitInfo.MultiSample}
 */
proto.cqsim.control.InitInfo.MultiSample.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cqsim.control.InitInfo.MultiSample();
  return proto.cqsim.control.InitInfo.MultiSample.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cqsim.control.InitInfo.MultiSample} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cqsim.control.InitInfo.MultiSample}
 */
proto.cqsim.control.InitInfo.MultiSample.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {number} */ (reader.readUint64());
        msg.setExpDesignId(value);
        break;
      case 2:
        var value = new proto.cqsim.control.NodeDesign();
        reader.readMessage(value, proto.cqsim.control.NodeDesign.deserializeBinaryFromReader);
        msg.addNodes(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cqsim.control.InitInfo.MultiSample.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.cqsim.control.InitInfo.MultiSample.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cqsim.control.InitInfo.MultiSample} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cqsim.control.InitInfo.MultiSample.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getExpDesignId();
  if (f !== 0) {
    writer.writeUint64(1, f);
  }
  f = message.getNodesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(2, f, proto.cqsim.control.NodeDesign.serializeBinaryToWriter);
  }
};

/**
 * optional uint64 exp_design_id = 1;
 * @return {number}
 */
proto.cqsim.control.InitInfo.MultiSample.prototype.getExpDesignId = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};

/**
 * @param {number} value
 * @return {!proto.cqsim.control.InitInfo.MultiSample} returns this
 */
proto.cqsim.control.InitInfo.MultiSample.prototype.setExpDesignId = function (value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};

/**
 * repeated NodeDesign nodes = 2;
 * @return {!Array<!proto.cqsim.control.NodeDesign>}
 */
proto.cqsim.control.InitInfo.MultiSample.prototype.getNodesList = function () {
  return /** @type{!Array<!proto.cqsim.control.NodeDesign>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.cqsim.control.NodeDesign, 2)
  );
};

/**
 * @param {!Array<!proto.cqsim.control.NodeDesign>} value
 * @return {!proto.cqsim.control.InitInfo.MultiSample} returns this
 */
proto.cqsim.control.InitInfo.MultiSample.prototype.setNodesList = function (value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};

/**
 * @param {!proto.cqsim.control.NodeDesign=} opt_value
 * @param {number=} opt_index
 * @return {!proto.cqsim.control.NodeDesign}
 */
proto.cqsim.control.InitInfo.MultiSample.prototype.addNodes = function (opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.cqsim.control.NodeDesign, opt_index);
};

/**
 * Clears the list making it empty but non-null.
 * @return {!proto.cqsim.control.InitInfo.MultiSample} returns this
 */
proto.cqsim.control.InitInfo.MultiSample.prototype.clearNodesList = function () {
  return this.setNodesList([]);
};

/**
 * optional OneSample one_sample_config = 1;
 * @return {?proto.cqsim.control.InitInfo.OneSample}
 */
proto.cqsim.control.InitInfo.prototype.getOneSampleConfig = function () {
  return /** @type{?proto.cqsim.control.InitInfo.OneSample} */ (
    jspb.Message.getWrapperField(this, proto.cqsim.control.InitInfo.OneSample, 1)
  );
};

/**
 * @param {?proto.cqsim.control.InitInfo.OneSample|undefined} value
 * @return {!proto.cqsim.control.InitInfo} returns this
 */
proto.cqsim.control.InitInfo.prototype.setOneSampleConfig = function (value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.cqsim.control.InitInfo.oneofGroups_[0], value);
};

/**
 * Clears the message field making it undefined.
 * @return {!proto.cqsim.control.InitInfo} returns this
 */
proto.cqsim.control.InitInfo.prototype.clearOneSampleConfig = function () {
  return this.setOneSampleConfig(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.cqsim.control.InitInfo.prototype.hasOneSampleConfig = function () {
  return jspb.Message.getField(this, 1) != null;
};

/**
 * optional MultiSample multi_sample_config = 2;
 * @return {?proto.cqsim.control.InitInfo.MultiSample}
 */
proto.cqsim.control.InitInfo.prototype.getMultiSampleConfig = function () {
  return /** @type{?proto.cqsim.control.InitInfo.MultiSample} */ (
    jspb.Message.getWrapperField(this, proto.cqsim.control.InitInfo.MultiSample, 2)
  );
};

/**
 * @param {?proto.cqsim.control.InitInfo.MultiSample|undefined} value
 * @return {!proto.cqsim.control.InitInfo} returns this
 */
proto.cqsim.control.InitInfo.prototype.setMultiSampleConfig = function (value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.cqsim.control.InitInfo.oneofGroups_[0], value);
};

/**
 * Clears the message field making it undefined.
 * @return {!proto.cqsim.control.InitInfo} returns this
 */
proto.cqsim.control.InitInfo.prototype.clearMultiSampleConfig = function () {
  return this.setMultiSampleConfig(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.cqsim.control.InitInfo.prototype.hasMultiSampleConfig = function () {
  return jspb.Message.getField(this, 2) != null;
};

/**
 * optional uint64 data_id = 3;
 * @return {number}
 */
proto.cqsim.control.InitInfo.prototype.getDataId = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};

/**
 * @param {number} value
 * @return {!proto.cqsim.control.InitInfo} returns this
 */
proto.cqsim.control.InitInfo.prototype.setDataId = function (value) {
  return jspb.Message.setOneofField(this, 3, proto.cqsim.control.InitInfo.oneofGroups_[0], value);
};

/**
 * Clears the field making it undefined.
 * @return {!proto.cqsim.control.InitInfo} returns this
 */
proto.cqsim.control.InitInfo.prototype.clearDataId = function () {
  return jspb.Message.setOneofField(this, 3, proto.cqsim.control.InitInfo.oneofGroups_[0], undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.cqsim.control.InitInfo.prototype.hasDataId = function () {
  return jspb.Message.getField(this, 3) != null;
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.cqsim.control.HttpInfo.prototype.toObject = function (opt_includeInstance) {
    return proto.cqsim.control.HttpInfo.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.cqsim.control.HttpInfo} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.cqsim.control.HttpInfo.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        token: jspb.Message.getFieldWithDefault(msg, 1, ""),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cqsim.control.HttpInfo}
 */
proto.cqsim.control.HttpInfo.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cqsim.control.HttpInfo();
  return proto.cqsim.control.HttpInfo.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cqsim.control.HttpInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cqsim.control.HttpInfo}
 */
proto.cqsim.control.HttpInfo.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString());
        msg.setToken(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cqsim.control.HttpInfo.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.cqsim.control.HttpInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cqsim.control.HttpInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cqsim.control.HttpInfo.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getToken();
  if (f.length > 0) {
    writer.writeString(1, f);
  }
};

/**
 * optional string token = 1;
 * @return {string}
 */
proto.cqsim.control.HttpInfo.prototype.getToken = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};

/**
 * @param {string} value
 * @return {!proto.cqsim.control.HttpInfo} returns this
 */
proto.cqsim.control.HttpInfo.prototype.setToken = function (value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};

/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.cqsim.control.ControlCmd.oneofGroups_ = [[1, 2, 3, 4, 5, 6]];

/**
 * @enum {number}
 */
proto.cqsim.control.ControlCmd.CmdCase = {
  CMD_NOT_SET: 0,
  SIM_START_TIME: 1,
  SIM_DURATION: 2,
  RUN_CMD: 3,
  TIME_STEP: 4,
  SPEED_RATIO: 5,
  MODE: 6,
};

/**
 * @return {proto.cqsim.control.ControlCmd.CmdCase}
 */
proto.cqsim.control.ControlCmd.prototype.getCmdCase = function () {
  return /** @type {proto.cqsim.control.ControlCmd.CmdCase} */ (
    jspb.Message.computeOneofCase(this, proto.cqsim.control.ControlCmd.oneofGroups_[0])
  );
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.cqsim.control.ControlCmd.prototype.toObject = function (opt_includeInstance) {
    return proto.cqsim.control.ControlCmd.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.cqsim.control.ControlCmd} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.cqsim.control.ControlCmd.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        simStartTime: (f = msg.getSimStartTime()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
        simDuration: (f = msg.getSimDuration()) && google_protobuf_duration_pb.Duration.toObject(includeInstance, f),
        runCmd: jspb.Message.getFieldWithDefault(msg, 3, 0),
        timeStep: jspb.Message.getFieldWithDefault(msg, 4, 0),
        speedRatio: jspb.Message.getFloatingPointFieldWithDefault(msg, 5, 0.0),
        mode: jspb.Message.getFieldWithDefault(msg, 6, 0),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cqsim.control.ControlCmd}
 */
proto.cqsim.control.ControlCmd.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cqsim.control.ControlCmd();
  return proto.cqsim.control.ControlCmd.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cqsim.control.ControlCmd} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cqsim.control.ControlCmd}
 */
proto.cqsim.control.ControlCmd.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = new google_protobuf_timestamp_pb.Timestamp();
        reader.readMessage(value, google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
        msg.setSimStartTime(value);
        break;
      case 2:
        var value = new google_protobuf_duration_pb.Duration();
        reader.readMessage(value, google_protobuf_duration_pb.Duration.deserializeBinaryFromReader);
        msg.setSimDuration(value);
        break;
      case 3:
        var value = /** @type {!proto.cqsim.control.ControlCmd.RunCmdType} */ (reader.readEnum());
        msg.setRunCmd(value);
        break;
      case 4:
        var value = /** @type {number} */ (reader.readUint32());
        msg.setTimeStep(value);
        break;
      case 5:
        var value = /** @type {number} */ (reader.readDouble());
        msg.setSpeedRatio(value);
        break;
      case 6:
        var value = /** @type {!proto.cqsim.control.ControlCmd.Mode} */ (reader.readEnum());
        msg.setMode(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cqsim.control.ControlCmd.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.cqsim.control.ControlCmd.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cqsim.control.ControlCmd} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cqsim.control.ControlCmd.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getSimStartTime();
  if (f != null) {
    writer.writeMessage(1, f, google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter);
  }
  f = message.getSimDuration();
  if (f != null) {
    writer.writeMessage(2, f, google_protobuf_duration_pb.Duration.serializeBinaryToWriter);
  }
  f = /** @type {!proto.cqsim.control.ControlCmd.RunCmdType} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeEnum(3, f);
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeUint32(4, f);
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeDouble(5, f);
  }
  f = /** @type {!proto.cqsim.control.ControlCmd.Mode} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeEnum(6, f);
  }
};

/**
 * @enum {number}
 */
proto.cqsim.control.ControlCmd.RunCmdType = {
  START: 0,
  SUSPEND: 1,
  CONTINUE: 2,
  STOP: 3,
  STOP_CURRENT_SAMPLE: 4,
};

/**
 * @enum {number}
 */
proto.cqsim.control.ControlCmd.Mode = {
  RECORD: 0,
  REPLAY: 1,
  CONVERSE: 2,
};

/**
 * optional google.protobuf.Timestamp sim_start_time = 1;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.cqsim.control.ControlCmd.prototype.getSimStartTime = function () {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 1)
  );
};

/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.cqsim.control.ControlCmd} returns this
 */
proto.cqsim.control.ControlCmd.prototype.setSimStartTime = function (value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.cqsim.control.ControlCmd.oneofGroups_[0], value);
};

/**
 * Clears the message field making it undefined.
 * @return {!proto.cqsim.control.ControlCmd} returns this
 */
proto.cqsim.control.ControlCmd.prototype.clearSimStartTime = function () {
  return this.setSimStartTime(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.cqsim.control.ControlCmd.prototype.hasSimStartTime = function () {
  return jspb.Message.getField(this, 1) != null;
};

/**
 * optional google.protobuf.Duration sim_duration = 2;
 * @return {?proto.google.protobuf.Duration}
 */
proto.cqsim.control.ControlCmd.prototype.getSimDuration = function () {
  return /** @type{?proto.google.protobuf.Duration} */ (
    jspb.Message.getWrapperField(this, google_protobuf_duration_pb.Duration, 2)
  );
};

/**
 * @param {?proto.google.protobuf.Duration|undefined} value
 * @return {!proto.cqsim.control.ControlCmd} returns this
 */
proto.cqsim.control.ControlCmd.prototype.setSimDuration = function (value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.cqsim.control.ControlCmd.oneofGroups_[0], value);
};

/**
 * Clears the message field making it undefined.
 * @return {!proto.cqsim.control.ControlCmd} returns this
 */
proto.cqsim.control.ControlCmd.prototype.clearSimDuration = function () {
  return this.setSimDuration(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.cqsim.control.ControlCmd.prototype.hasSimDuration = function () {
  return jspb.Message.getField(this, 2) != null;
};

/**
 * optional RunCmdType run_cmd = 3;
 * @return {!proto.cqsim.control.ControlCmd.RunCmdType}
 */
proto.cqsim.control.ControlCmd.prototype.getRunCmd = function () {
  return /** @type {!proto.cqsim.control.ControlCmd.RunCmdType} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};

/**
 * @param {!proto.cqsim.control.ControlCmd.RunCmdType} value
 * @return {!proto.cqsim.control.ControlCmd} returns this
 */
proto.cqsim.control.ControlCmd.prototype.setRunCmd = function (value) {
  return jspb.Message.setOneofField(this, 3, proto.cqsim.control.ControlCmd.oneofGroups_[0], value);
};

/**
 * Clears the field making it undefined.
 * @return {!proto.cqsim.control.ControlCmd} returns this
 */
proto.cqsim.control.ControlCmd.prototype.clearRunCmd = function () {
  return jspb.Message.setOneofField(this, 3, proto.cqsim.control.ControlCmd.oneofGroups_[0], undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.cqsim.control.ControlCmd.prototype.hasRunCmd = function () {
  return jspb.Message.getField(this, 3) != null;
};

/**
 * optional uint32 time_step = 4;
 * @return {number}
 */
proto.cqsim.control.ControlCmd.prototype.getTimeStep = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};

/**
 * @param {number} value
 * @return {!proto.cqsim.control.ControlCmd} returns this
 */
proto.cqsim.control.ControlCmd.prototype.setTimeStep = function (value) {
  return jspb.Message.setOneofField(this, 4, proto.cqsim.control.ControlCmd.oneofGroups_[0], value);
};

/**
 * Clears the field making it undefined.
 * @return {!proto.cqsim.control.ControlCmd} returns this
 */
proto.cqsim.control.ControlCmd.prototype.clearTimeStep = function () {
  return jspb.Message.setOneofField(this, 4, proto.cqsim.control.ControlCmd.oneofGroups_[0], undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.cqsim.control.ControlCmd.prototype.hasTimeStep = function () {
  return jspb.Message.getField(this, 4) != null;
};

/**
 * optional double speed_ratio = 5;
 * @return {number}
 */
proto.cqsim.control.ControlCmd.prototype.getSpeedRatio = function () {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 5, 0.0));
};

/**
 * @param {number} value
 * @return {!proto.cqsim.control.ControlCmd} returns this
 */
proto.cqsim.control.ControlCmd.prototype.setSpeedRatio = function (value) {
  return jspb.Message.setOneofField(this, 5, proto.cqsim.control.ControlCmd.oneofGroups_[0], value);
};

/**
 * Clears the field making it undefined.
 * @return {!proto.cqsim.control.ControlCmd} returns this
 */
proto.cqsim.control.ControlCmd.prototype.clearSpeedRatio = function () {
  return jspb.Message.setOneofField(this, 5, proto.cqsim.control.ControlCmd.oneofGroups_[0], undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.cqsim.control.ControlCmd.prototype.hasSpeedRatio = function () {
  return jspb.Message.getField(this, 5) != null;
};

/**
 * optional Mode mode = 6;
 * @return {!proto.cqsim.control.ControlCmd.Mode}
 */
proto.cqsim.control.ControlCmd.prototype.getMode = function () {
  return /** @type {!proto.cqsim.control.ControlCmd.Mode} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};

/**
 * @param {!proto.cqsim.control.ControlCmd.Mode} value
 * @return {!proto.cqsim.control.ControlCmd} returns this
 */
proto.cqsim.control.ControlCmd.prototype.setMode = function (value) {
  return jspb.Message.setOneofField(this, 6, proto.cqsim.control.ControlCmd.oneofGroups_[0], value);
};

/**
 * Clears the field making it undefined.
 * @return {!proto.cqsim.control.ControlCmd} returns this
 */
proto.cqsim.control.ControlCmd.prototype.clearMode = function () {
  return jspb.Message.setOneofField(this, 6, proto.cqsim.control.ControlCmd.oneofGroups_[0], undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.cqsim.control.ControlCmd.prototype.hasMode = function () {
  return jspb.Message.getField(this, 6) != null;
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.cqsim.control.EngineNodeState.prototype.toObject = function (opt_includeInstance) {
    return proto.cqsim.control.EngineNodeState.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.cqsim.control.EngineNodeState} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.cqsim.control.EngineNodeState.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        address: jspb.Message.getFieldWithDefault(msg, 1, ""),
        state: jspb.Message.getFieldWithDefault(msg, 2, 0),
        cpuLoad: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 0.0),
        memoryLoad: jspb.Message.getFloatingPointFieldWithDefault(msg, 4, 0.0),
        networkLoad: jspb.Message.getFloatingPointFieldWithDefault(msg, 5, 0.0),
        isMasterNode: jspb.Message.getBooleanFieldWithDefault(msg, 6, false),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cqsim.control.EngineNodeState}
 */
proto.cqsim.control.EngineNodeState.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cqsim.control.EngineNodeState();
  return proto.cqsim.control.EngineNodeState.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cqsim.control.EngineNodeState} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cqsim.control.EngineNodeState}
 */
proto.cqsim.control.EngineNodeState.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString());
        msg.setAddress(value);
        break;
      case 2:
        var value = /** @type {!proto.cqsim.control.EngineNodeState.State} */ (reader.readEnum());
        msg.setState(value);
        break;
      case 3:
        var value = /** @type {number} */ (reader.readDouble());
        msg.setCpuLoad(value);
        break;
      case 4:
        var value = /** @type {number} */ (reader.readDouble());
        msg.setMemoryLoad(value);
        break;
      case 5:
        var value = /** @type {number} */ (reader.readDouble());
        msg.setNetworkLoad(value);
        break;
      case 6:
        var value = /** @type {boolean} */ (reader.readBool());
        msg.setIsMasterNode(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cqsim.control.EngineNodeState.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.cqsim.control.EngineNodeState.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cqsim.control.EngineNodeState} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cqsim.control.EngineNodeState.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getAddress();
  if (f.length > 0) {
    writer.writeString(1, f);
  }
  f = message.getState();
  if (f !== 0.0) {
    writer.writeEnum(2, f);
  }
  f = message.getCpuLoad();
  if (f !== 0.0) {
    writer.writeDouble(3, f);
  }
  f = message.getMemoryLoad();
  if (f !== 0.0) {
    writer.writeDouble(4, f);
  }
  f = message.getNetworkLoad();
  if (f !== 0.0) {
    writer.writeDouble(5, f);
  }
  f = message.getIsMasterNode();
  if (f) {
    writer.writeBool(6, f);
  }
};

/**
 * @enum {number}
 */
proto.cqsim.control.EngineNodeState.State = {
  UNINITED: 0,
  INITED: 1,
  RUNNING: 2,
  SUSPENDED: 3,
  STOPPED: 4,
  ERROR: 5,
};

/**
 * optional string address = 1;
 * @return {string}
 */
proto.cqsim.control.EngineNodeState.prototype.getAddress = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};

/**
 * @param {string} value
 * @return {!proto.cqsim.control.EngineNodeState} returns this
 */
proto.cqsim.control.EngineNodeState.prototype.setAddress = function (value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};

/**
 * optional State state = 2;
 * @return {!proto.cqsim.control.EngineNodeState.State}
 */
proto.cqsim.control.EngineNodeState.prototype.getState = function () {
  return /** @type {!proto.cqsim.control.EngineNodeState.State} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};

/**
 * @param {!proto.cqsim.control.EngineNodeState.State} value
 * @return {!proto.cqsim.control.EngineNodeState} returns this
 */
proto.cqsim.control.EngineNodeState.prototype.setState = function (value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};

/**
 * optional double cpu_load = 3;
 * @return {number}
 */
proto.cqsim.control.EngineNodeState.prototype.getCpuLoad = function () {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};

/**
 * @param {number} value
 * @return {!proto.cqsim.control.EngineNodeState} returns this
 */
proto.cqsim.control.EngineNodeState.prototype.setCpuLoad = function (value) {
  return jspb.Message.setProto3FloatField(this, 3, value);
};

/**
 * optional double memory_load = 4;
 * @return {number}
 */
proto.cqsim.control.EngineNodeState.prototype.getMemoryLoad = function () {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.0));
};

/**
 * @param {number} value
 * @return {!proto.cqsim.control.EngineNodeState} returns this
 */
proto.cqsim.control.EngineNodeState.prototype.setMemoryLoad = function (value) {
  return jspb.Message.setProto3FloatField(this, 4, value);
};

/**
 * optional double network_load = 5;
 * @return {number}
 */
proto.cqsim.control.EngineNodeState.prototype.getNetworkLoad = function () {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 5, 0.0));
};

/**
 * @param {number} value
 * @return {!proto.cqsim.control.EngineNodeState} returns this
 */
proto.cqsim.control.EngineNodeState.prototype.setNetworkLoad = function (value) {
  return jspb.Message.setProto3FloatField(this, 5, value);
};

/**
 * optional bool is_master_node = 6;
 * @return {boolean}
 */
proto.cqsim.control.EngineNodeState.prototype.getIsMasterNode = function () {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 6, false));
};

/**
 * @param {boolean} value
 * @return {!proto.cqsim.control.EngineNodeState} returns this
 */
proto.cqsim.control.EngineNodeState.prototype.setIsMasterNode = function (value) {
  return jspb.Message.setProto3BooleanField(this, 6, value);
};

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.cqsim.control.SysInfoResponse.repeatedFields_ = [7];

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.cqsim.control.SysInfoResponse.prototype.toObject = function (opt_includeInstance) {
    return proto.cqsim.control.SysInfoResponse.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.cqsim.control.SysInfoResponse} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.cqsim.control.SysInfoResponse.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        simCurrentTime: (f = msg.getSimCurrentTime()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
        simDuration: (f = msg.getSimDuration()) && google_protobuf_duration_pb.Duration.toObject(includeInstance, f),
        realDuration: (f = msg.getRealDuration()) && google_protobuf_duration_pb.Duration.toObject(includeInstance, f),
        simTimeStep: jspb.Message.getFieldWithDefault(msg, 4, 0),
        speedRatio: jspb.Message.getFloatingPointFieldWithDefault(msg, 5, 0.0),
        realSpeedRatio: jspb.Message.getFloatingPointFieldWithDefault(msg, 6, 0.0),
        nodeStateList: jspb.Message.toObjectList(
          msg.getNodeStateList(),
          proto.cqsim.control.EngineNodeState.toObject,
          includeInstance
        ),
        currentSampleId: jspb.Message.getFieldWithDefault(msg, 8, 0),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cqsim.control.SysInfoResponse}
 */
proto.cqsim.control.SysInfoResponse.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cqsim.control.SysInfoResponse();
  return proto.cqsim.control.SysInfoResponse.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cqsim.control.SysInfoResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cqsim.control.SysInfoResponse}
 */
proto.cqsim.control.SysInfoResponse.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = new google_protobuf_timestamp_pb.Timestamp();
        reader.readMessage(value, google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
        msg.setSimCurrentTime(value);
        break;
      case 2:
        var value = new google_protobuf_duration_pb.Duration();
        reader.readMessage(value, google_protobuf_duration_pb.Duration.deserializeBinaryFromReader);
        msg.setSimDuration(value);
        break;
      case 3:
        var value = new google_protobuf_duration_pb.Duration();
        reader.readMessage(value, google_protobuf_duration_pb.Duration.deserializeBinaryFromReader);
        msg.setRealDuration(value);
        break;
      case 4:
        var value = /** @type {number} */ (reader.readUint32());
        msg.setSimTimeStep(value);
        break;
      case 5:
        var value = /** @type {number} */ (reader.readDouble());
        msg.setSpeedRatio(value);
        break;
      case 6:
        var value = /** @type {number} */ (reader.readDouble());
        msg.setRealSpeedRatio(value);
        break;
      case 7:
        var value = new proto.cqsim.control.EngineNodeState();
        reader.readMessage(value, proto.cqsim.control.EngineNodeState.deserializeBinaryFromReader);
        msg.addNodeState(value);
        break;
      case 8:
        var value = /** @type {number} */ (reader.readUint32());
        msg.setCurrentSampleId(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cqsim.control.SysInfoResponse.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.cqsim.control.SysInfoResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cqsim.control.SysInfoResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cqsim.control.SysInfoResponse.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getSimCurrentTime();
  if (f != null) {
    writer.writeMessage(1, f, google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter);
  }
  f = message.getSimDuration();
  if (f != null) {
    writer.writeMessage(2, f, google_protobuf_duration_pb.Duration.serializeBinaryToWriter);
  }
  f = message.getRealDuration();
  if (f != null) {
    writer.writeMessage(3, f, google_protobuf_duration_pb.Duration.serializeBinaryToWriter);
  }
  f = message.getSimTimeStep();
  if (f !== 0) {
    writer.writeUint32(4, f);
  }
  f = message.getSpeedRatio();
  if (f !== 0.0) {
    writer.writeDouble(5, f);
  }
  f = message.getRealSpeedRatio();
  if (f !== 0.0) {
    writer.writeDouble(6, f);
  }
  f = message.getNodeStateList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(7, f, proto.cqsim.control.EngineNodeState.serializeBinaryToWriter);
  }
  f = message.getCurrentSampleId();
  if (f !== 0) {
    writer.writeUint32(8, f);
  }
};

/**
 * optional google.protobuf.Timestamp sim_current_time = 1;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.cqsim.control.SysInfoResponse.prototype.getSimCurrentTime = function () {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 1)
  );
};

/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.cqsim.control.SysInfoResponse} returns this
 */
proto.cqsim.control.SysInfoResponse.prototype.setSimCurrentTime = function (value) {
  return jspb.Message.setWrapperField(this, 1, value);
};

/**
 * Clears the message field making it undefined.
 * @return {!proto.cqsim.control.SysInfoResponse} returns this
 */
proto.cqsim.control.SysInfoResponse.prototype.clearSimCurrentTime = function () {
  return this.setSimCurrentTime(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.cqsim.control.SysInfoResponse.prototype.hasSimCurrentTime = function () {
  return jspb.Message.getField(this, 1) != null;
};

/**
 * optional google.protobuf.Duration sim_duration = 2;
 * @return {?proto.google.protobuf.Duration}
 */
proto.cqsim.control.SysInfoResponse.prototype.getSimDuration = function () {
  return /** @type{?proto.google.protobuf.Duration} */ (
    jspb.Message.getWrapperField(this, google_protobuf_duration_pb.Duration, 2)
  );
};

/**
 * @param {?proto.google.protobuf.Duration|undefined} value
 * @return {!proto.cqsim.control.SysInfoResponse} returns this
 */
proto.cqsim.control.SysInfoResponse.prototype.setSimDuration = function (value) {
  return jspb.Message.setWrapperField(this, 2, value);
};

/**
 * Clears the message field making it undefined.
 * @return {!proto.cqsim.control.SysInfoResponse} returns this
 */
proto.cqsim.control.SysInfoResponse.prototype.clearSimDuration = function () {
  return this.setSimDuration(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.cqsim.control.SysInfoResponse.prototype.hasSimDuration = function () {
  return jspb.Message.getField(this, 2) != null;
};

/**
 * optional google.protobuf.Duration real_duration = 3;
 * @return {?proto.google.protobuf.Duration}
 */
proto.cqsim.control.SysInfoResponse.prototype.getRealDuration = function () {
  return /** @type{?proto.google.protobuf.Duration} */ (
    jspb.Message.getWrapperField(this, google_protobuf_duration_pb.Duration, 3)
  );
};

/**
 * @param {?proto.google.protobuf.Duration|undefined} value
 * @return {!proto.cqsim.control.SysInfoResponse} returns this
 */
proto.cqsim.control.SysInfoResponse.prototype.setRealDuration = function (value) {
  return jspb.Message.setWrapperField(this, 3, value);
};

/**
 * Clears the message field making it undefined.
 * @return {!proto.cqsim.control.SysInfoResponse} returns this
 */
proto.cqsim.control.SysInfoResponse.prototype.clearRealDuration = function () {
  return this.setRealDuration(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.cqsim.control.SysInfoResponse.prototype.hasRealDuration = function () {
  return jspb.Message.getField(this, 3) != null;
};

/**
 * optional uint32 sim_time_step = 4;
 * @return {number}
 */
proto.cqsim.control.SysInfoResponse.prototype.getSimTimeStep = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};

/**
 * @param {number} value
 * @return {!proto.cqsim.control.SysInfoResponse} returns this
 */
proto.cqsim.control.SysInfoResponse.prototype.setSimTimeStep = function (value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};

/**
 * optional double speed_ratio = 5;
 * @return {number}
 */
proto.cqsim.control.SysInfoResponse.prototype.getSpeedRatio = function () {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 5, 0.0));
};

/**
 * @param {number} value
 * @return {!proto.cqsim.control.SysInfoResponse} returns this
 */
proto.cqsim.control.SysInfoResponse.prototype.setSpeedRatio = function (value) {
  return jspb.Message.setProto3FloatField(this, 5, value);
};

/**
 * optional double real_speed_ratio = 6;
 * @return {number}
 */
proto.cqsim.control.SysInfoResponse.prototype.getRealSpeedRatio = function () {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 6, 0.0));
};

/**
 * @param {number} value
 * @return {!proto.cqsim.control.SysInfoResponse} returns this
 */
proto.cqsim.control.SysInfoResponse.prototype.setRealSpeedRatio = function (value) {
  return jspb.Message.setProto3FloatField(this, 6, value);
};

/**
 * repeated EngineNodeState node_state = 7;
 * @return {!Array<!proto.cqsim.control.EngineNodeState>}
 */
proto.cqsim.control.SysInfoResponse.prototype.getNodeStateList = function () {
  return /** @type{!Array<!proto.cqsim.control.EngineNodeState>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.cqsim.control.EngineNodeState, 7)
  );
};

/**
 * @param {!Array<!proto.cqsim.control.EngineNodeState>} value
 * @return {!proto.cqsim.control.SysInfoResponse} returns this
 */
proto.cqsim.control.SysInfoResponse.prototype.setNodeStateList = function (value) {
  return jspb.Message.setRepeatedWrapperField(this, 7, value);
};

/**
 * @param {!proto.cqsim.control.EngineNodeState=} opt_value
 * @param {number=} opt_index
 * @return {!proto.cqsim.control.EngineNodeState}
 */
proto.cqsim.control.SysInfoResponse.prototype.addNodeState = function (opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 7, opt_value, proto.cqsim.control.EngineNodeState, opt_index);
};

/**
 * Clears the list making it empty but non-null.
 * @return {!proto.cqsim.control.SysInfoResponse} returns this
 */
proto.cqsim.control.SysInfoResponse.prototype.clearNodeStateList = function () {
  return this.setNodeStateList([]);
};

/**
 * optional uint32 current_sample_id = 8;
 * @return {number}
 */
proto.cqsim.control.SysInfoResponse.prototype.getCurrentSampleId = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};

/**
 * @param {number} value
 * @return {!proto.cqsim.control.SysInfoResponse} returns this
 */
proto.cqsim.control.SysInfoResponse.prototype.setCurrentSampleId = function (value) {
  return jspb.Message.setProto3IntField(this, 8, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.cqsim.control.DataSysInfoResponse.prototype.toObject = function (opt_includeInstance) {
    return proto.cqsim.control.DataSysInfoResponse.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.cqsim.control.DataSysInfoResponse} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.cqsim.control.DataSysInfoResponse.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        state: jspb.Message.getFieldWithDefault(msg, 1, 0),
        currentTime: (f = msg.getCurrentTime()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
        duration: (f = msg.getDuration()) && google_protobuf_duration_pb.Duration.toObject(includeInstance, f),
        scheduleVal: jspb.Message.getFloatingPointFieldWithDefault(msg, 4, 0.0),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cqsim.control.DataSysInfoResponse}
 */
proto.cqsim.control.DataSysInfoResponse.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cqsim.control.DataSysInfoResponse();
  return proto.cqsim.control.DataSysInfoResponse.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cqsim.control.DataSysInfoResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cqsim.control.DataSysInfoResponse}
 */
proto.cqsim.control.DataSysInfoResponse.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {!proto.cqsim.control.DataSysInfoResponse.ServiceState} */ (reader.readEnum());
        msg.setState(value);
        break;
      case 2:
        var value = new google_protobuf_timestamp_pb.Timestamp();
        reader.readMessage(value, google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
        msg.setCurrentTime(value);
        break;
      case 3:
        var value = new google_protobuf_duration_pb.Duration();
        reader.readMessage(value, google_protobuf_duration_pb.Duration.deserializeBinaryFromReader);
        msg.setDuration(value);
        break;
      case 4:
        var value = /** @type {number} */ (reader.readDouble());
        msg.setScheduleVal(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cqsim.control.DataSysInfoResponse.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.cqsim.control.DataSysInfoResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cqsim.control.DataSysInfoResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cqsim.control.DataSysInfoResponse.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getState();
  if (f !== 0.0) {
    writer.writeEnum(1, f);
  }
  f = message.getCurrentTime();
  if (f != null) {
    writer.writeMessage(2, f, google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter);
  }
  f = message.getDuration();
  if (f != null) {
    writer.writeMessage(3, f, google_protobuf_duration_pb.Duration.serializeBinaryToWriter);
  }
  f = message.getScheduleVal();
  if (f !== 0.0) {
    writer.writeDouble(4, f);
  }
};

/**
 * @enum {number}
 */
proto.cqsim.control.DataSysInfoResponse.ServiceState = {
  UNINITED: 0,
  INITED: 1,
  RUNNING: 2,
  SUSPENDED: 3,
  STOPPED: 4,
  ERROR: 5,
};

/**
 * optional ServiceState state = 1;
 * @return {!proto.cqsim.control.DataSysInfoResponse.ServiceState}
 */
proto.cqsim.control.DataSysInfoResponse.prototype.getState = function () {
  return /** @type {!proto.cqsim.control.DataSysInfoResponse.ServiceState} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};

/**
 * @param {!proto.cqsim.control.DataSysInfoResponse.ServiceState} value
 * @return {!proto.cqsim.control.DataSysInfoResponse} returns this
 */
proto.cqsim.control.DataSysInfoResponse.prototype.setState = function (value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};

/**
 * optional google.protobuf.Timestamp current_time = 2;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.cqsim.control.DataSysInfoResponse.prototype.getCurrentTime = function () {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 2)
  );
};

/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.cqsim.control.DataSysInfoResponse} returns this
 */
proto.cqsim.control.DataSysInfoResponse.prototype.setCurrentTime = function (value) {
  return jspb.Message.setWrapperField(this, 2, value);
};

/**
 * Clears the message field making it undefined.
 * @return {!proto.cqsim.control.DataSysInfoResponse} returns this
 */
proto.cqsim.control.DataSysInfoResponse.prototype.clearCurrentTime = function () {
  return this.setCurrentTime(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.cqsim.control.DataSysInfoResponse.prototype.hasCurrentTime = function () {
  return jspb.Message.getField(this, 2) != null;
};

/**
 * optional google.protobuf.Duration duration = 3;
 * @return {?proto.google.protobuf.Duration}
 */
proto.cqsim.control.DataSysInfoResponse.prototype.getDuration = function () {
  return /** @type{?proto.google.protobuf.Duration} */ (
    jspb.Message.getWrapperField(this, google_protobuf_duration_pb.Duration, 3)
  );
};

/**
 * @param {?proto.google.protobuf.Duration|undefined} value
 * @return {!proto.cqsim.control.DataSysInfoResponse} returns this
 */
proto.cqsim.control.DataSysInfoResponse.prototype.setDuration = function (value) {
  return jspb.Message.setWrapperField(this, 3, value);
};

/**
 * Clears the message field making it undefined.
 * @return {!proto.cqsim.control.DataSysInfoResponse} returns this
 */
proto.cqsim.control.DataSysInfoResponse.prototype.clearDuration = function () {
  return this.setDuration(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.cqsim.control.DataSysInfoResponse.prototype.hasDuration = function () {
  return jspb.Message.getField(this, 3) != null;
};

/**
 * optional double schedule_val = 4;
 * @return {number}
 */
proto.cqsim.control.DataSysInfoResponse.prototype.getScheduleVal = function () {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.0));
};

/**
 * @param {number} value
 * @return {!proto.cqsim.control.DataSysInfoResponse} returns this
 */
proto.cqsim.control.DataSysInfoResponse.prototype.setScheduleVal = function (value) {
  return jspb.Message.setProto3FloatField(this, 4, value);
};

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.cqsim.control.NodeResponse.repeatedFields_ = [1];

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.cqsim.control.NodeResponse.prototype.toObject = function (opt_includeInstance) {
    return proto.cqsim.control.NodeResponse.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.cqsim.control.NodeResponse} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.cqsim.control.NodeResponse.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        nodesList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f,
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cqsim.control.NodeResponse}
 */
proto.cqsim.control.NodeResponse.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cqsim.control.NodeResponse();
  return proto.cqsim.control.NodeResponse.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cqsim.control.NodeResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cqsim.control.NodeResponse}
 */
proto.cqsim.control.NodeResponse.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString());
        msg.addNodes(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cqsim.control.NodeResponse.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.cqsim.control.NodeResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cqsim.control.NodeResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cqsim.control.NodeResponse.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getNodesList();
  if (f.length > 0) {
    writer.writeRepeatedString(1, f);
  }
};

/**
 * repeated string nodes = 1;
 * @return {!Array<string>}
 */
proto.cqsim.control.NodeResponse.prototype.getNodesList = function () {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1));
};

/**
 * @param {!Array<string>} value
 * @return {!proto.cqsim.control.NodeResponse} returns this
 */
proto.cqsim.control.NodeResponse.prototype.setNodesList = function (value) {
  return jspb.Message.setField(this, 1, value || []);
};

/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.cqsim.control.NodeResponse} returns this
 */
proto.cqsim.control.NodeResponse.prototype.addNodes = function (value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};

/**
 * Clears the list making it empty but non-null.
 * @return {!proto.cqsim.control.NodeResponse} returns this
 */
proto.cqsim.control.NodeResponse.prototype.clearNodesList = function () {
  return this.setNodesList([]);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.cqsim.control.InitedResponse.prototype.toObject = function (opt_includeInstance) {
    return proto.cqsim.control.InitedResponse.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.cqsim.control.InitedResponse} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.cqsim.control.InitedResponse.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        initPercent: jspb.Message.getFieldWithDefault(msg, 1, 0),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cqsim.control.InitedResponse}
 */
proto.cqsim.control.InitedResponse.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cqsim.control.InitedResponse();
  return proto.cqsim.control.InitedResponse.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cqsim.control.InitedResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cqsim.control.InitedResponse}
 */
proto.cqsim.control.InitedResponse.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {number} */ (reader.readUint32());
        msg.setInitPercent(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cqsim.control.InitedResponse.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.cqsim.control.InitedResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cqsim.control.InitedResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cqsim.control.InitedResponse.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getInitPercent();
  if (f !== 0) {
    writer.writeUint32(1, f);
  }
};

/**
 * optional uint32 init_percent = 1;
 * @return {number}
 */
proto.cqsim.control.InitedResponse.prototype.getInitPercent = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};

/**
 * @param {number} value
 * @return {!proto.cqsim.control.InitedResponse} returns this
 */
proto.cqsim.control.InitedResponse.prototype.setInitPercent = function (value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};

/**
 * @enum {number}
 */
proto.cqsim.control.LogLevel = {
  TRACE: 0,
  DEBUG: 1,
  INFO: 2,
  WARN: 3,
  ERROR: 4,
  CRITICAL_ERROR: 5,
};

export default proto.cqsim.control;
