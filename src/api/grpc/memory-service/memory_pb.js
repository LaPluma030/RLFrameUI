// source: memory.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

import * as jspb from "google-protobuf";
var goog = jspb;
var proto = {};

goog.exportSymbol("rl_memory.CommonResponse", null, proto);
goog.exportSymbol("rl_memory.GetMemoryRequest", null, proto);
goog.exportSymbol("rl_memory.GetMemoryResponse", null, proto);
goog.exportSymbol("rl_memory.InitModel", null, proto);
goog.exportSymbol("rl_memory.InitRequest", null, proto);
goog.exportSymbol("rl_memory.ResetRequest", null, proto);
goog.exportSymbol("rl_memory.SaveMemoryRequest", null, proto);
goog.exportSymbol("rl_memory.SaveMemoryRequest.instance_info", null, proto);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rl_memory.SaveMemoryRequest = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.rl_memory.SaveMemoryRequest.repeatedFields_, null);
};
goog.inherits(proto.rl_memory.SaveMemoryRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rl_memory.SaveMemoryRequest.displayName = "proto.rl_memory.SaveMemoryRequest";
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rl_memory.SaveMemoryRequest.instance_info = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.rl_memory.SaveMemoryRequest.instance_info.repeatedFields_, null);
};
goog.inherits(proto.rl_memory.SaveMemoryRequest.instance_info, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rl_memory.SaveMemoryRequest.instance_info.displayName = "proto.rl_memory.SaveMemoryRequest.instance_info";
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rl_memory.CommonResponse = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rl_memory.CommonResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rl_memory.CommonResponse.displayName = "proto.rl_memory.CommonResponse";
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rl_memory.GetMemoryRequest = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rl_memory.GetMemoryRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rl_memory.GetMemoryRequest.displayName = "proto.rl_memory.GetMemoryRequest";
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rl_memory.GetMemoryResponse = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rl_memory.GetMemoryResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rl_memory.GetMemoryResponse.displayName = "proto.rl_memory.GetMemoryResponse";
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rl_memory.InitModel = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rl_memory.InitModel, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rl_memory.InitModel.displayName = "proto.rl_memory.InitModel";
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rl_memory.InitRequest = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.rl_memory.InitRequest.repeatedFields_, null);
};
goog.inherits(proto.rl_memory.InitRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rl_memory.InitRequest.displayName = "proto.rl_memory.InitRequest";
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rl_memory.ResetRequest = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rl_memory.ResetRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rl_memory.ResetRequest.displayName = "proto.rl_memory.ResetRequest";
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.rl_memory.SaveMemoryRequest.repeatedFields_ = [1];

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.rl_memory.SaveMemoryRequest.prototype.toObject = function (opt_includeInstance) {
    return proto.rl_memory.SaveMemoryRequest.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.rl_memory.SaveMemoryRequest} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.rl_memory.SaveMemoryRequest.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        instanceInfosList: jspb.Message.toObjectList(
          msg.getInstanceInfosList(),
          proto.rl_memory.SaveMemoryRequest.instance_info.toObject,
          includeInstance
        ),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rl_memory.SaveMemoryRequest}
 */
proto.rl_memory.SaveMemoryRequest.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rl_memory.SaveMemoryRequest();
  return proto.rl_memory.SaveMemoryRequest.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rl_memory.SaveMemoryRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rl_memory.SaveMemoryRequest}
 */
proto.rl_memory.SaveMemoryRequest.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = new proto.rl_memory.SaveMemoryRequest.instance_info();
        reader.readMessage(value, proto.rl_memory.SaveMemoryRequest.instance_info.deserializeBinaryFromReader);
        msg.addInstanceInfos(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rl_memory.SaveMemoryRequest.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.rl_memory.SaveMemoryRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rl_memory.SaveMemoryRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rl_memory.SaveMemoryRequest.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getInstanceInfosList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(1, f, proto.rl_memory.SaveMemoryRequest.instance_info.serializeBinaryToWriter);
  }
};

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.rl_memory.SaveMemoryRequest.instance_info.repeatedFields_ = [1, 2, 3];

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.rl_memory.SaveMemoryRequest.instance_info.prototype.toObject = function (opt_includeInstance) {
    return proto.rl_memory.SaveMemoryRequest.instance_info.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.rl_memory.SaveMemoryRequest.instance_info} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.rl_memory.SaveMemoryRequest.instance_info.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        statusList: (f = jspb.Message.getRepeatedFloatingPointField(msg, 1)) == null ? undefined : f,
        actionList: (f = jspb.Message.getRepeatedFloatingPointField(msg, 2)) == null ? undefined : f,
        statusNextList: (f = jspb.Message.getRepeatedFloatingPointField(msg, 3)) == null ? undefined : f,
        instanceId: jspb.Message.getFieldWithDefault(msg, 4, 0),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rl_memory.SaveMemoryRequest.instance_info}
 */
proto.rl_memory.SaveMemoryRequest.instance_info.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rl_memory.SaveMemoryRequest.instance_info();
  return proto.rl_memory.SaveMemoryRequest.instance_info.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rl_memory.SaveMemoryRequest.instance_info} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rl_memory.SaveMemoryRequest.instance_info}
 */
proto.rl_memory.SaveMemoryRequest.instance_info.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedFloat() : [reader.readFloat()]);
        for (var i = 0; i < values.length; i++) {
          msg.addStatus(values[i]);
        }
        break;
      case 2:
        var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedFloat() : [reader.readFloat()]);
        for (var i = 0; i < values.length; i++) {
          msg.addAction(values[i]);
        }
        break;
      case 3:
        var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedFloat() : [reader.readFloat()]);
        for (var i = 0; i < values.length; i++) {
          msg.addStatusNext(values[i]);
        }
        break;
      case 4:
        var value = /** @type {number} */ (reader.readUint64());
        msg.setInstanceId(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rl_memory.SaveMemoryRequest.instance_info.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.rl_memory.SaveMemoryRequest.instance_info.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rl_memory.SaveMemoryRequest.instance_info} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rl_memory.SaveMemoryRequest.instance_info.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getStatusList();
  if (f.length > 0) {
    writer.writePackedFloat(1, f);
  }
  f = message.getActionList();
  if (f.length > 0) {
    writer.writePackedFloat(2, f);
  }
  f = message.getStatusNextList();
  if (f.length > 0) {
    writer.writePackedFloat(3, f);
  }
  f = message.getInstanceId();
  if (f !== 0) {
    writer.writeUint64(4, f);
  }
};

/**
 * repeated float status = 1;
 * @return {!Array<number>}
 */
proto.rl_memory.SaveMemoryRequest.instance_info.prototype.getStatusList = function () {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedFloatingPointField(this, 1));
};

/**
 * @param {!Array<number>} value
 * @return {!proto.rl_memory.SaveMemoryRequest.instance_info} returns this
 */
proto.rl_memory.SaveMemoryRequest.instance_info.prototype.setStatusList = function (value) {
  return jspb.Message.setField(this, 1, value || []);
};

/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.rl_memory.SaveMemoryRequest.instance_info} returns this
 */
proto.rl_memory.SaveMemoryRequest.instance_info.prototype.addStatus = function (value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};

/**
 * Clears the list making it empty but non-null.
 * @return {!proto.rl_memory.SaveMemoryRequest.instance_info} returns this
 */
proto.rl_memory.SaveMemoryRequest.instance_info.prototype.clearStatusList = function () {
  return this.setStatusList([]);
};

/**
 * repeated float action = 2;
 * @return {!Array<number>}
 */
proto.rl_memory.SaveMemoryRequest.instance_info.prototype.getActionList = function () {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedFloatingPointField(this, 2));
};

/**
 * @param {!Array<number>} value
 * @return {!proto.rl_memory.SaveMemoryRequest.instance_info} returns this
 */
proto.rl_memory.SaveMemoryRequest.instance_info.prototype.setActionList = function (value) {
  return jspb.Message.setField(this, 2, value || []);
};

/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.rl_memory.SaveMemoryRequest.instance_info} returns this
 */
proto.rl_memory.SaveMemoryRequest.instance_info.prototype.addAction = function (value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};

/**
 * Clears the list making it empty but non-null.
 * @return {!proto.rl_memory.SaveMemoryRequest.instance_info} returns this
 */
proto.rl_memory.SaveMemoryRequest.instance_info.prototype.clearActionList = function () {
  return this.setActionList([]);
};

/**
 * repeated float status_next = 3;
 * @return {!Array<number>}
 */
proto.rl_memory.SaveMemoryRequest.instance_info.prototype.getStatusNextList = function () {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedFloatingPointField(this, 3));
};

/**
 * @param {!Array<number>} value
 * @return {!proto.rl_memory.SaveMemoryRequest.instance_info} returns this
 */
proto.rl_memory.SaveMemoryRequest.instance_info.prototype.setStatusNextList = function (value) {
  return jspb.Message.setField(this, 3, value || []);
};

/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.rl_memory.SaveMemoryRequest.instance_info} returns this
 */
proto.rl_memory.SaveMemoryRequest.instance_info.prototype.addStatusNext = function (value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};

/**
 * Clears the list making it empty but non-null.
 * @return {!proto.rl_memory.SaveMemoryRequest.instance_info} returns this
 */
proto.rl_memory.SaveMemoryRequest.instance_info.prototype.clearStatusNextList = function () {
  return this.setStatusNextList([]);
};

/**
 * optional uint64 instance_id = 4;
 * @return {number}
 */
proto.rl_memory.SaveMemoryRequest.instance_info.prototype.getInstanceId = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};

/**
 * @param {number} value
 * @return {!proto.rl_memory.SaveMemoryRequest.instance_info} returns this
 */
proto.rl_memory.SaveMemoryRequest.instance_info.prototype.setInstanceId = function (value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};

/**
 * repeated instance_info instance_infos = 1;
 * @return {!Array<!proto.rl_memory.SaveMemoryRequest.instance_info>}
 */
proto.rl_memory.SaveMemoryRequest.prototype.getInstanceInfosList = function () {
  return /** @type{!Array<!proto.rl_memory.SaveMemoryRequest.instance_info>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.rl_memory.SaveMemoryRequest.instance_info, 1)
  );
};

/**
 * @param {!Array<!proto.rl_memory.SaveMemoryRequest.instance_info>} value
 * @return {!proto.rl_memory.SaveMemoryRequest} returns this
 */
proto.rl_memory.SaveMemoryRequest.prototype.setInstanceInfosList = function (value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};

/**
 * @param {!proto.rl_memory.SaveMemoryRequest.instance_info=} opt_value
 * @param {number=} opt_index
 * @return {!proto.rl_memory.SaveMemoryRequest.instance_info}
 */
proto.rl_memory.SaveMemoryRequest.prototype.addInstanceInfos = function (opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.rl_memory.SaveMemoryRequest.instance_info, opt_index);
};

/**
 * Clears the list making it empty but non-null.
 * @return {!proto.rl_memory.SaveMemoryRequest} returns this
 */
proto.rl_memory.SaveMemoryRequest.prototype.clearInstanceInfosList = function () {
  return this.setInstanceInfosList([]);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.rl_memory.CommonResponse.prototype.toObject = function (opt_includeInstance) {
    return proto.rl_memory.CommonResponse.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.rl_memory.CommonResponse} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.rl_memory.CommonResponse.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        msg: jspb.Message.getFieldWithDefault(msg, 1, ""),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rl_memory.CommonResponse}
 */
proto.rl_memory.CommonResponse.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rl_memory.CommonResponse();
  return proto.rl_memory.CommonResponse.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rl_memory.CommonResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rl_memory.CommonResponse}
 */
proto.rl_memory.CommonResponse.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString());
        msg.setMsg(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rl_memory.CommonResponse.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.rl_memory.CommonResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rl_memory.CommonResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rl_memory.CommonResponse.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getMsg();
  if (f.length > 0) {
    writer.writeString(1, f);
  }
};

/**
 * optional string msg = 1;
 * @return {string}
 */
proto.rl_memory.CommonResponse.prototype.getMsg = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};

/**
 * @param {string} value
 * @return {!proto.rl_memory.CommonResponse} returns this
 */
proto.rl_memory.CommonResponse.prototype.setMsg = function (value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.rl_memory.GetMemoryRequest.prototype.toObject = function (opt_includeInstance) {
    return proto.rl_memory.GetMemoryRequest.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.rl_memory.GetMemoryRequest} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.rl_memory.GetMemoryRequest.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        batchSize: jspb.Message.getFieldWithDefault(msg, 1, 0),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rl_memory.GetMemoryRequest}
 */
proto.rl_memory.GetMemoryRequest.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rl_memory.GetMemoryRequest();
  return proto.rl_memory.GetMemoryRequest.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rl_memory.GetMemoryRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rl_memory.GetMemoryRequest}
 */
proto.rl_memory.GetMemoryRequest.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {number} */ (reader.readInt64());
        msg.setBatchSize(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rl_memory.GetMemoryRequest.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.rl_memory.GetMemoryRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rl_memory.GetMemoryRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rl_memory.GetMemoryRequest.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getBatchSize();
  if (f !== 0) {
    writer.writeInt64(1, f);
  }
};

/**
 * optional int64 batch_size = 1;
 * @return {number}
 */
proto.rl_memory.GetMemoryRequest.prototype.getBatchSize = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};

/**
 * @param {number} value
 * @return {!proto.rl_memory.GetMemoryRequest} returns this
 */
proto.rl_memory.GetMemoryRequest.prototype.setBatchSize = function (value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.rl_memory.GetMemoryResponse.prototype.toObject = function (opt_includeInstance) {
    return proto.rl_memory.GetMemoryResponse.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.rl_memory.GetMemoryResponse} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.rl_memory.GetMemoryResponse.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        memory: msg.getMemory_asB64(),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rl_memory.GetMemoryResponse}
 */
proto.rl_memory.GetMemoryResponse.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rl_memory.GetMemoryResponse();
  return proto.rl_memory.GetMemoryResponse.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rl_memory.GetMemoryResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rl_memory.GetMemoryResponse}
 */
proto.rl_memory.GetMemoryResponse.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {!Uint8Array} */ (reader.readBytes());
        msg.setMemory(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rl_memory.GetMemoryResponse.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.rl_memory.GetMemoryResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rl_memory.GetMemoryResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rl_memory.GetMemoryResponse.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getMemory_asU8();
  if (f.length > 0) {
    writer.writeBytes(1, f);
  }
};

/**
 * optional bytes memory = 1;
 * @return {string}
 */
proto.rl_memory.GetMemoryResponse.prototype.getMemory = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};

/**
 * optional bytes memory = 1;
 * This is a type-conversion wrapper around `getMemory()`
 * @return {string}
 */
proto.rl_memory.GetMemoryResponse.prototype.getMemory_asB64 = function () {
  return /** @type {string} */ (jspb.Message.bytesAsB64(this.getMemory()));
};

/**
 * optional bytes memory = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getMemory()`
 * @return {!Uint8Array}
 */
proto.rl_memory.GetMemoryResponse.prototype.getMemory_asU8 = function () {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(this.getMemory()));
};

/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.rl_memory.GetMemoryResponse} returns this
 */
proto.rl_memory.GetMemoryResponse.prototype.setMemory = function (value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.rl_memory.InitModel.prototype.toObject = function (opt_includeInstance) {
    return proto.rl_memory.InitModel.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.rl_memory.InitModel} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.rl_memory.InitModel.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        statusdimension: jspb.Message.getFieldWithDefault(msg, 1, 0),
        actiondimension: jspb.Message.getFieldWithDefault(msg, 2, 0),
        rewardfunction: jspb.Message.getFieldWithDefault(msg, 3, ""),
        memorycapacity: jspb.Message.getFieldWithDefault(msg, 4, 0),
        modelid: jspb.Message.getFieldWithDefault(msg, 5, ""),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rl_memory.InitModel}
 */
proto.rl_memory.InitModel.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rl_memory.InitModel();
  return proto.rl_memory.InitModel.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rl_memory.InitModel} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rl_memory.InitModel}
 */
proto.rl_memory.InitModel.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {number} */ (reader.readInt64());
        msg.setStatusdimension(value);
        break;
      case 2:
        var value = /** @type {number} */ (reader.readInt64());
        msg.setActiondimension(value);
        break;
      case 3:
        var value = /** @type {string} */ (reader.readString());
        msg.setRewardfunction(value);
        break;
      case 4:
        var value = /** @type {number} */ (reader.readInt64());
        msg.setMemorycapacity(value);
        break;
      case 5:
        var value = /** @type {string} */ (reader.readString());
        msg.setModelid(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rl_memory.InitModel.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.rl_memory.InitModel.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rl_memory.InitModel} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rl_memory.InitModel.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getStatusdimension();
  if (f !== 0) {
    writer.writeInt64(1, f);
  }
  f = message.getActiondimension();
  if (f !== 0) {
    writer.writeInt64(2, f);
  }
  f = message.getRewardfunction();
  if (f.length > 0) {
    writer.writeString(3, f);
  }
  f = message.getMemorycapacity();
  if (f !== 0) {
    writer.writeInt64(4, f);
  }
  f = message.getModelid();
  if (f.length > 0) {
    writer.writeString(5, f);
  }
};

/**
 * optional int64 statusDimension = 1;
 * @return {number}
 */
proto.rl_memory.InitModel.prototype.getStatusdimension = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};

/**
 * @param {number} value
 * @return {!proto.rl_memory.InitModel} returns this
 */
proto.rl_memory.InitModel.prototype.setStatusdimension = function (value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};

/**
 * optional int64 actionDimension = 2;
 * @return {number}
 */
proto.rl_memory.InitModel.prototype.getActiondimension = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};

/**
 * @param {number} value
 * @return {!proto.rl_memory.InitModel} returns this
 */
proto.rl_memory.InitModel.prototype.setActiondimension = function (value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};

/**
 * optional string rewardFunction = 3;
 * @return {string}
 */
proto.rl_memory.InitModel.prototype.getRewardfunction = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};

/**
 * @param {string} value
 * @return {!proto.rl_memory.InitModel} returns this
 */
proto.rl_memory.InitModel.prototype.setRewardfunction = function (value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};

/**
 * optional int64 memoryCapacity = 4;
 * @return {number}
 */
proto.rl_memory.InitModel.prototype.getMemorycapacity = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};

/**
 * @param {number} value
 * @return {!proto.rl_memory.InitModel} returns this
 */
proto.rl_memory.InitModel.prototype.setMemorycapacity = function (value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};

/**
 * optional string modelId = 5;
 * @return {string}
 */
proto.rl_memory.InitModel.prototype.getModelid = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};

/**
 * @param {string} value
 * @return {!proto.rl_memory.InitModel} returns this
 */
proto.rl_memory.InitModel.prototype.setModelid = function (value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.rl_memory.InitRequest.repeatedFields_ = [1];

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.rl_memory.InitRequest.prototype.toObject = function (opt_includeInstance) {
    return proto.rl_memory.InitRequest.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.rl_memory.InitRequest} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.rl_memory.InitRequest.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        initmodelsList: jspb.Message.toObjectList(msg.getInitmodelsList(), proto.rl_memory.InitModel.toObject, includeInstance),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rl_memory.InitRequest}
 */
proto.rl_memory.InitRequest.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rl_memory.InitRequest();
  return proto.rl_memory.InitRequest.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rl_memory.InitRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rl_memory.InitRequest}
 */
proto.rl_memory.InitRequest.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = new proto.rl_memory.InitModel();
        reader.readMessage(value, proto.rl_memory.InitModel.deserializeBinaryFromReader);
        msg.addInitmodels(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rl_memory.InitRequest.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.rl_memory.InitRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rl_memory.InitRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rl_memory.InitRequest.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getInitmodelsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(1, f, proto.rl_memory.InitModel.serializeBinaryToWriter);
  }
};

/**
 * repeated InitModel initModels = 1;
 * @return {!Array<!proto.rl_memory.InitModel>}
 */
proto.rl_memory.InitRequest.prototype.getInitmodelsList = function () {
  return /** @type{!Array<!proto.rl_memory.InitModel>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.rl_memory.InitModel, 1)
  );
};

/**
 * @param {!Array<!proto.rl_memory.InitModel>} value
 * @return {!proto.rl_memory.InitRequest} returns this
 */
proto.rl_memory.InitRequest.prototype.setInitmodelsList = function (value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};

/**
 * @param {!proto.rl_memory.InitModel=} opt_value
 * @param {number=} opt_index
 * @return {!proto.rl_memory.InitModel}
 */
proto.rl_memory.InitRequest.prototype.addInitmodels = function (opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.rl_memory.InitModel, opt_index);
};

/**
 * Clears the list making it empty but non-null.
 * @return {!proto.rl_memory.InitRequest} returns this
 */
proto.rl_memory.InitRequest.prototype.clearInitmodelsList = function () {
  return this.setInitmodelsList([]);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.rl_memory.ResetRequest.prototype.toObject = function (opt_includeInstance) {
    return proto.rl_memory.ResetRequest.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.rl_memory.ResetRequest} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.rl_memory.ResetRequest.toObject = function (includeInstance, msg) {
    var f,
      obj = {};

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rl_memory.ResetRequest}
 */
proto.rl_memory.ResetRequest.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rl_memory.ResetRequest();
  return proto.rl_memory.ResetRequest.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rl_memory.ResetRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rl_memory.ResetRequest}
 */
proto.rl_memory.ResetRequest.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rl_memory.ResetRequest.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.rl_memory.ResetRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rl_memory.ResetRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rl_memory.ResetRequest.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
};

export default proto.rl_memory;
